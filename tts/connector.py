#@Anup Commented codes for connecting, code ahile test matra ho
import unittest
import os
import math
#import everything needed (just copied from test)
from pydub import AudioSegment
from pydub.utils import db_to_float, ratio_to_db
from TTS_parser import *
text=u'म घर गएर भात खान्छु'


#set the directory of the data

data_dir = os.path.join(os.path.dirname(__file__), 'spaced barakhari')

#as we will have a single file from beg to end assuming mainfile is the file which is a wav
mainfile = AudioSegment.from_wav(os.path.join(data_dir, 'final.wav'))


#get the time stamp from 2d array of tuples 
	#format is	array sound=
	#[[ka, ka , ki ,ki ,ku , ku , ke ,kai , ko , kau, kam, ka],
	#kha..
	#gha...
	#.
	#.
	#.
	#]
	#eg for ka and ka
	#[[(0.5,0.6),(0.7,0.8),......],[],[],[]]	
#sound_timestamp=[[(285300,285600),(230850,231070)],[(91800,92200)]]
#sound_timestamp=[[(306000,306350),(29070,29350)],[(216700,217200)]]
#sound_timestamp=[[(519, 812), (1645, 1888), (2736, 3098), (3889, 4304), (5055, 5423), (6007, 6502), (7618, 7971), (8922, 9244), (10007, 10360), (11097, 11410), (12054, 12429), (13002, 13283)],[(1194, 1429), (2298, 2625), (3466, 3740), (4603, 4896), (5680, 5955), (6792, 7042), (7913, 8222), (8944, 9252), (10054, 10384), (11168, 11518), (12298, 12611), (13400, 13622)],
sound_timestamp=[[(519, 812), (1645, 1888), (2736, 3098), (3889, 4304), (5055, 5423), (6007, 6502), (7618, 7971), (8922, 9244), (10007, 10360), (11097, 11410), (12054, 12429), (13002, 13283)] ,
[(15264, 15499), (16368, 16695), (17502, 17811), (18673, 18967), (19750, 20025), (20862, 21112), (21988, 22293), (23005, 23323), (24124, 24454), (25222, 25589), (26368, 26682), (27471, 27746)] ,
[(29067, 29400), (30145, 30462), (31165, 31453), (32132, 32460), (33140, 33414), (34131, 34437), (35222, 35427), (36212, 36488), (37151, 37455), (38114, 38429), (39081, 39462), (40088, 40411)] ,
[(41598, 41996), (42256, 42742), (43063, 43495), (43965, 44278), (44689, 45092), (45475, 45880), (46214, 46643), (47024, 47383), (47771, 48187), (48644, 48986), (49418, 49818), (50215, 50482)] ,
[(51896, 52196), (52822, 53277), (53810, 54190), (54660, 55090), (55617, 55997), (56568, 56892), (57504, 57827), (58338, 58694), (59296, 59644), (60212, 60542), (61092, 61479), (62000, 62293)] ,
[(63243, 63704), (63860, 64409), (64616, 65186), (65445, 66013), (66289, 66743), (67031, 67441), (67696, 68227), (68455, 68902), (69162, 69613), (69849, 70251), (70574, 70978), (71201, 71696)] ,
[(72747, 73081), (73888, 74259), (74909, 75283), (76058, 76476), (77117, 77391), (78082, 78379), (79078, 79445), (80085, 80436), (81030, 81383), (82017, 82350), (82953, 83291), (83923, 84192)] ,
[(85753, 86195), (86840, 87236), (87856, 88299), (88869, 89287), (89839, 90201), (90873, 91392), (91852, 92284), (92868, 93322), (93856, 94249), (94847, 95303), (95779, 96203), (96666, 96977)] ,
[(98012, 98490), (98857, 99427), (99727, 100213), (100647, 101060), (101505, 101955), (102482, 102957), (103268, 103758), (104216, 104776), (105030, 105543), (106047, 106366), (106851, 107233), (107726, 108120)] ,
[(109149, 109561), (110094, 110500), (111019, 111441), (111931, 112399), (112838, 113274), (113828, 114282), (114767, 115171), (115694, 116137), (116596, 117121), (117565, 118032), (118477, 118907), (119282, 119645)] ,
[(120884, 121407), (121786, 122281), (122667, 123167), (123577, 124047), (124553, 125070), (125458, 126017), (126341, 126813), (127257, 127720), (128153, 128649), (129013, 129505), (129869, 130271), (130714, 131031)] ,
[(132419, 132702), (133474, 133778), (134579, 134895), (135573, 135942), (136655, 137024), (137602, 137953), (138499, 138859), (139444, 139805), (140368, 140704), (141278, 141600), (142154, 142489), (143052, 143385)] ,
[(144071, 144511), (145021, 145429), (145979, 146363), (146931, 147360), (147854, 148267), (148752, 149132), (149619, 150028), (150541, 150905), (151378, 151797), (152254, 152691), (153111, 153558), (154047, 154391)] ,
[(155622, 156047), (156480, 156908), (157299, 157732), (158063, 158530), (158862, 159416), (159750, 160169), (160535, 160966), (161363, 161839), (162167, 162600), (162958, 163398), (163740, 164138), (164469, 164881)] ,
[(165913, 166304), (167004, 167371), (167979, 168390), (168859, 169296), (169857, 170215), (170738, 171196), (171570, 172032), (172525, 172888), (173318, 173728), (174317, 174682), (175135, 175617), (176088, 176396)] ,
[(177073, 177530), (178046, 178501), (178961, 179386), (179865, 180272), (180715, 181167), (181456, 181907), (182239, 182716), (183050, 183513), (183908, 184357), (184785, 185223), (185616, 186120), (186450, 186744)] ,
[(188189, 188459), (189028, 189371), (189867, 190165), (190707, 190980), (191513, 191795), (192341, 192636), (193185, 193472), (194033, 194346), (194865, 195167), (195646, 195934), (196438, 196728), (197213, 197450)] ,
[(199077, 199452), (200010, 200379), (200835, 201200), (201746, 202060), (202696, 203046), (203523, 203928), (204447, 204742), (205329, 205698), (206258, 206632), (207227, 207579), (208084, 208459), (209039, 209331)] ,
[(210457, 210897), (211311, 211769), (212209, 212677), (213110, 213594), (214030, 214517), (214913, 215382), (215813, 216318), (216683, 217116), (217528, 218053), (218370, 218891), (219258, 219675), (220067, 220441)] ,
[(221298, 221835), (222092, 222543), (222940, 223349), (223693, 224084), (224417, 224854), (225189, 225548), (225926, 226335), (226701, 227082), (227429, 227799), (228148, 228546), (228865, 229283), (229490, 229803)] ,
[(230774, 231249), (231733, 232268), (232750, 233222), (233727, 234180), (234714, 235184), (235626, 236128), (236543, 237055), (237527, 238012), (238488, 238878), (239390, 239841), (240342, 240757), (241265, 241668)] ,
[(242953, 243274), (243881, 244234), (244773, 245157), (245600, 245976), (246433, 246872), (247301, 247682), (248130, 248485), (248989, 249334), (249814, 250158), (250624, 250963), (251459, 251846), (252253, 252526)] ,
[(253868, 254204), (254791, 255134), (255601, 255954), (256454, 256807), (257351, 257752), (258220, 258601), (259088, 259455), (259992, 260327), (260866, 261217), (261693, 262084), (262536, 262962), (263319, 263621)] ,
[(264406, 264927), (265363, 265754), (266090, 266472), (266902, 267324), (267688, 268133), (268481, 268886), (269269, 269678), (270065, 270451), (270866, 271216), (271632, 272055), (272443, 272874), (273191, 273521)] ,
[(274556, 274976), (275338, 275743), (276155, 276497), (276903, 277261), (277638, 278037), (278433, 278772), (279133, 279522), (279918, 280268), (280669, 281024), (281396, 281800), (282202, 282547), (282868, 283211)] ,
[(284455, 284817), (285331, 285737), (286238, 286602), (287003, 287395), (287740, 288206), (288525, 288949), (289313, 289755), (290109, 290432), (290867, 291239), (291593, 291978), (292364, 292795), (293082, 293352)] ,
[(294343, 294827), (295251, 295706), (296154, 296614), (297077, 297540), (298036, 298481), (298950, 299464), (299804, 300279), (300615, 301128), (301484, 302021), (302309, 302958), (303122, 303618), (303870, 304323)] ,
[(305218, 305639), (306089, 306487), (306995, 307438), (307865, 308282), (308704, 309253), (309512, 309939), (310294, 310733), (311097, 311524), (311868, 312272), (312683, 313031), (313424, 313809), (314132, 314427)] ,
[(315704, 316105), (316734, 317152), (317661, 318020), (318596, 319002), (319432, 319898), (320416, 320764), (321299, 321673), (322178, 322625), (323034, 323443), (323890, 324313), (324717, 325152), (325633, 325940)] ,
[(326918, 327325), (327881, 328303), (328711, 329122), (329531, 329935), (330300, 330751), (331081, 331490), (331875, 332307), (332636, 332985), (333341, 333803), (334090, 334486), (334803, 335306), (335497, 335852)] ,
[(336950, 337324), (337600, 338003), (338371, 338725), (339057, 339491), (339857, 340252), (340596, 341021), (341307, 341753), (342047, 342504), (342801, 343207), (343558, 344013), (344322, 344787), (345168, 345502)] ,
[(345982, 346426), (346426, 346871), (347070, 347509), (347683, 348032), (348217, 348631), (348834, 349239), (349414, 349793), (349980, 350409), (350606, 351057), (351264, 351735), (351935, 352351), (352546, 352840)] ,
[(354181, 354620), (354875, 355312), (355525, 355971), (356183, 356699), (356828, 357279), (357443, 357850), (358048, 358501), (358645, 359029), (359270, 359747), (359889, 360366), (360577, 360977), (361190, 361566)] ,
[(362523, 362851), (363206, 363531), (363871, 364157), (364555, 364816), (365237, 365555), (365851, 366157), (366599, 366918), (367247, 367590), (367946, 368276), (368583, 368868), (369201, 369547), (369908, 370214)] ,
[(371257, 371722), (372228, 372674), (373280, 373656), (374253, 374626), (375230, 375573), (376253, 376638), (377158, 377522), (378104, 378433), (379018, 379407), (379922, 380297), (380821, 381206), (381686, 381986)] ,
[(383389, 383675), (384254, 384530), (385059, 385435), (385932, 386213), (386769, 387055), (387618, 387870), (388352, 388727), (389222, 389522), (390007, 390465), (390782, 391102), (391620, 391954), (392334, 392585), (393500, 393943)] ]
#calculation routine
	#so now we obtain value from the leaves 

#initializing the parser
setval(u'म घर गएर ')
parser=Parser();
parser.setText(text)
output=parser.Parse()
leaves=parser.GetListOutput()
print parser.GetListOutput()
for i in sound_timestamp:
	print len(i)
	#so just do foreach value in the leaf from left ->assign a sound
	#starting from a,aa till gya ,gyaaa
	#so for mainfile[i][j][k] where i is root alphabet say ka,kha,j is ka kaa ki,and k is the specific starting=0 or ending =1
	
start_index=0
end_index=1
one_sec_of_silence=mainfile[:1000]-mainfile.rms
	#initialize list as container for storing raw audio clips 	
raw_audio=[]

	#leaves is the output from our parser
for index in leaves:
	if(isinstance(index,int)):
		
		if index==10001:#1 is space
			raw_audio.append(one_sec_of_silence[:150])
		elif index==10006:#2 is purnaviram
			raw_audio.append(one_sec_of_silence[:600])
		elif index==10002:#2 is purnaviram
			raw_audio.append(one_sec_of_silence[:600])
		elif index==10003:#3 is alpaviram
			raw_audio.append(one_sec_of_silence[:250])
		elif index==10004:#4 is ardaviram
			raw_audio.append(one_sec_of_silence[:300])				
		else:
			i=index/12
			j=index%12
			raw_audio.append(mainfile[sound_timestamp[i][j][start_index]+35:sound_timestamp[i][j][end_index]-50])
	else:
		new_index=math.floor(index)
		i=int(index/12)
		j=int(index%12)
		#calculate duration of the audio
		duration=sound_timestamp[i][j][end_index]-sound_timestamp[i][j][start_index]
		if (duration<=0):
			print "error"
		elif(new_index>=0 and new_index<=11):
			raw_audio.append(mainfile[sound_timestamp[i][j][start_index]+duration/6:sound_timestamp[i][j][end_index]-(duration/3)])
		else:
			#cut audio from front to half 
			raw_audio.append(mainfile[sound_timestamp[i][j][start_index]:sound_timestamp[i][j][end_index]-(duration/2)])
	
	
#now its time for connecting the parts

final=one_sec_of_silence

for audio_part in raw_audio:
	final=final.append(one_sec_of_silence[:1],crossfade=150)+audio_part.fade_in(150)

#append one second silence at the end
final=final.append(one_sec_of_silence,crossfade=100)
		
#write the output to output.wav
final.export(os.path.join(data_dir, 'output.wav'),"wav")
		